<%
require_locals delivery_intervention
delivery_note_item = discard_on_delivery_note_item_in_one_line

discard = delivery_intervention.discards.detect{ |d| d.delivery_note_item_id == delivery_note_item.id } || delivery_intervention.discards.build(:delivery_note_item_id => delivery_note_item.id)
end_product = delivery_note_item.quote_item.end_product
%>

<% fields_for "delivery_intervention[discard_attributes][]", discard, :index => nil do |form| %>
  <% form.force_show_view = delivery_intervention.was_realized? %>
  <tr>
    <td class="reference"><%= end_product.product_reference.reference %></td>
    <td class="designation"><span class="name"><%= end_product.name %></span><br/><span class="description"><%= end_product.description %></span></td>
    <td class="quantity_to_deliver"><%= delivery_note_item.quantity %></td>
    <td class="quantity"><%= form.form_or_view(form.select(:quantity, (0..delivery_note_item.quantity), {}, :onchange => "toggle_disable_comments_for_discard(this)"), :quantity) %></td>
    <td class="actions">
      <%= form.form_or_view(form.text_area_autoresize(:comments, :disabled => ( discard.quantity.nil? or discard.quantity.zero? ), :class => 'comments'), :comments) %>
      <%= form.hidden_field :id %>
      <%= form.hidden_field :delivery_note_item_id %>
    </td>
  </tr>
<% end %>
